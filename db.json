{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-yun/source/yun.png","path":"yun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","path":"yun.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","path":"css/README.md","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-3EC4DL6A.js","path":"js/chunk-3EC4DL6A.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-75SSY253.js","path":"js/chunk-75SSY253.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","path":"js/say.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","path":"js/analytics/leancloud-visitors.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","path":"js/comments/waline.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"6989896991948d67236c6d85d8c7b2ff39b70548","modified":1656650144849},{"_id":"source/about/index.md","hash":"302c1379390bc48b652b9419d5b4931279ac5b0a","modified":1656652440648},{"_id":"source/categories/index.md","hash":"b429711bb0516070ced4d6c93847358cb7fb4eea","modified":1656566086745},{"_id":"source/_posts/test.md","hash":"1c50949e05af2572580e68a8a4884acfccde9324","modified":1656918288877},{"_id":"source/tags/index.md","hash":"b1e852e5aba386a1a122ac68616e95be290f914c","modified":1656566085782},{"_id":"source/_posts/test/1656911489933.png","hash":"71a06e7f10e9a732352f6e5b5b947256a81bd818","modified":1656911489915},{"_id":"source/_posts/acm/ABC258.md","hash":"b91cfb0b7a2cf5c80071959cea9d096e70d263af","modified":1656918467642},{"_id":"source/_posts/acm/Convoluted_Intervals.md","hash":"ecfa976ea85a9db4810c4bff2f6dc4c512e9edbb","modified":1656834589333},{"_id":"source/_posts/acm/ABC258/image-20220703162432579.png","hash":"6c6e05b6a3da07814be957d9a383ba139f5f5950","modified":1656836672584},{"_id":"node_modules/hexo-theme-yun/_vendors.yml","hash":"6623aaae00b02baa5b46e6e886f266d1213a4117","modified":1656557930010},{"_id":"node_modules/hexo-theme-yun/_config.yml","hash":"c4a6d08e85d8327f865564121789138c1d213f53","modified":1656560871339},{"_id":"node_modules/hexo-theme-yun/package.json","hash":"99a0fcf7a24866660513d4501832e42ed4a2fbb9","modified":1656557929715},{"_id":"node_modules/hexo-theme-yun/languages/default.yml","hash":"5d50a944a8b527fd857c81b17a60e5cc414c5729","modified":1656557930011},{"_id":"node_modules/hexo-theme-yun/languages/ja.yml","hash":"17354770a46fdd7c7301ee2278fbba411922eb02","modified":1656557930015},{"_id":"node_modules/hexo-theme-yun/languages/zh-CN.yml","hash":"0d84fd939b07db22137b122ed4e9615f4e3a47c3","modified":1656557930016},{"_id":"node_modules/hexo-theme-yun/languages/en.yml","hash":"f6bdd8f04501bad6cb0480d4233cfea346147f22","modified":1656557930012},{"_id":"node_modules/hexo-theme-yun/layout/404.pug","hash":"e96d09b7d27c22c0759514b00ebcf21c711cb021","modified":1656557929732},{"_id":"node_modules/hexo-theme-yun/layout/archive.pug","hash":"2fff8c7364d0457b6a61342b30bac5330ff72a80","modified":1656557929751},{"_id":"node_modules/hexo-theme-yun/layout/category.pug","hash":"2ff582cf3af26842b7969248fc19e1a3ad59e231","modified":1656557929771},{"_id":"node_modules/hexo-theme-yun/layout/gallery.pug","hash":"0c4335cd31b8ce3a999f6d1c1d09365d67e46cba","modified":1656557929790},{"_id":"node_modules/hexo-theme-yun/layout/girls.pug","hash":"b22b459f7be4d91c00d85eeac5d00aee915e70a0","modified":1656557929793},{"_id":"node_modules/hexo-theme-yun/layout/links.pug","hash":"64d298ae7d0bd7126621b0b34b099e8808959161","modified":1656557929853},{"_id":"node_modules/hexo-theme-yun/layout/index.pug","hash":"7322ea6d9cfb29b1bb13a31bb5f98abcf5d9f409","modified":1656557929841},{"_id":"node_modules/hexo-theme-yun/layout/page.pug","hash":"41a55f894b8ef018a84ad1f19e60423351dbe401","modified":1656557929869},{"_id":"node_modules/hexo-theme-yun/layout/post.pug","hash":"538c280a308326a058972828b4f69d16b232fd58","modified":1656557929891},{"_id":"node_modules/hexo-theme-yun/layout/slide.pug","hash":"547a6e27a1b8023e51d8447ab7ccfd82b1680e74","modified":1656557929903},{"_id":"node_modules/hexo-theme-yun/source/yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1656557929728},{"_id":"node_modules/hexo-theme-yun/layout/tag.pug","hash":"5cbd52c89fc664a0fb90a3e4d3ea14c990f791a5","modified":1656557929905},{"_id":"node_modules/hexo-theme-yun/source/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1656557930007},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/icon.pug","hash":"c4b1ceb94fa522b22028aaef3b28c7da7c5e19b7","modified":1656557929811},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/page-header.pug","hash":"7ab9c1a6099eda3a64f355caa4d8fac5deff94c6","modified":1656557929867},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/index.pug","hash":"378b5ccf052e951ee130d2ff56245e8faa7e020f","modified":1656557929826},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1656557929875},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-categories.pug","hash":"c5d1b78d024ee44ca88e94a692c8a27f7ac5073a","modified":1656557929875},{"_id":"node_modules/hexo-theme-yun/layout/_partial/background.pug","hash":"2c369cbdbfd9c9c1fa31a860a77617c4d33e5e21","modified":1656557929758},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-meta.pug","hash":"c04195c579dcf6886518752306af72156c7a7e2d","modified":1656557929883},{"_id":"node_modules/hexo-theme-yun/layout/_mixin/post-tags.pug","hash":"f5a264cfc5d49326b2a710b2835c6d9766b0948d","modified":1656557929889},{"_id":"node_modules/hexo-theme-yun/layout/_partial/extended.pug","hash":"185c2238e8678ff9cb32a7b14c144a1f14dd5f92","modified":1656557929784},{"_id":"node_modules/hexo-theme-yun/layout/_partial/footer.pug","hash":"288d232e66c97dfbf870cb3bd4ffc2c81e387bdc","modified":1656557929787},{"_id":"node_modules/hexo-theme-yun/layout/_partial/banner.pug","hash":"ec089f56b2c37054223734ea9161d9b6e5ae0373","modified":1656557929764},{"_id":"node_modules/hexo-theme-yun/layout/_partial/head.pug","hash":"67d04062a67e63250be24d503eed723a9ab67a23","modified":1656557929809},{"_id":"node_modules/hexo-theme-yun/layout/_partial/layout.pug","hash":"350b3699b0ee53449146943e0142a89998c89114","modified":1656557929847},{"_id":"node_modules/hexo-theme-yun/layout/_partial/pagination.pug","hash":"f65cce84f7ceec372b2d4b91433e9ec6c7145690","modified":1656557929871},{"_id":"node_modules/hexo-theme-yun/layout/_partial/recent-posts.pug","hash":"ece17f8f9cd4739bb4b86f013a8fd86dae30a247","modified":1656557929893},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar.pug","hash":"93d38e5a982e8fa14d9b11c9f4e70cf10a45e4f8","modified":1656557929901},{"_id":"node_modules/hexo-theme-yun/layout/_widget/aplayer.pug","hash":"45675643a8d5e64117f94612e517ce4dff6ca053","modified":1656557929747},{"_id":"node_modules/hexo-theme-yun/layout/_widget/back-to-top.pug","hash":"982ea5071886ef4df8b1b1467805a72804ae849d","modified":1656557929754},{"_id":"node_modules/hexo-theme-yun/layout/_widget/cloud.pug","hash":"8903d1311bf5f68dcc23e520cb4f1e4385aff70d","modified":1656557929777},{"_id":"node_modules/hexo-theme-yun/layout/_widget/mourn.pug","hash":"22fab84749be6a28814e4d79fb074a31dee44e1b","modified":1656557929864},{"_id":"node_modules/hexo-theme-yun/layout/_widget/notice.pug","hash":"780a10dbf308022790c58a4d2117dc2f48581531","modified":1656557929865},{"_id":"node_modules/hexo-theme-yun/layout/_widget/say.pug","hash":"e02ffa7b837e3ff387d0cc888b9fed39c717628b","modified":1656557929896},{"_id":"node_modules/hexo-theme-yun/layout/_widget/index.pug","hash":"4d1a35e4e0dc485733b0697d073d4f56afb7c1a2","modified":1656557929838},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/cdn.pug","hash":"3c03f2ebc0c931f64f7daeffb10b289c3117beed","modified":1656557929773},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/aplayer.pug","hash":"642445a227e8b702be443958b49901d7c884555f","modified":1656557929742},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/google-tagmanager.pug","hash":"01724665b723aaa1b5fc3a63e3b538970efcd13c","modified":1656557929807},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/iconify.pug","hash":"03121fc0ae99dcf9ae9039beb1a6b26bd289c988","modified":1656557929822},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/lightgallery.pug","hash":"30f493d3780e0f928554d2adb8094c8e07c39a94","modified":1656557929851},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/medium-zoom.pug","hash":"7bed328c65aa03c3cb0753b31a16793912ff52af","modified":1656557929858},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/index.pug","hash":"c7ca05ff19e71b141ecfbe031a63e225178c2eec","modified":1656557929830},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/pjax.pug","hash":"4c137fe0ba8cac806f5c9a4ca723c0bc233ca8da","modified":1656557929873},{"_id":"node_modules/hexo-theme-yun/source/css/README.md","hash":"9f65c9d90a2764bd7b1a32cabc7013bfd3285594","modified":1656557929721},{"_id":"node_modules/hexo-theme-yun/source/css/hexo-theme-yun.styl","hash":"9d7a11fc1d8196812907fc4a0557ffd10420c39c","modified":1656557929953},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-3EC4DL6A.js","hash":"e12c416b465181a5b2100ea1f638e62aa6743316","modified":1656557929455},{"_id":"node_modules/hexo-theme-yun/source/js/chunk-75SSY253.js","hash":"f3e2ca0314bec7d5b4c0c01318087ef980083d6f","modified":1656557929475},{"_id":"node_modules/hexo-theme-yun/source/js/hexo-theme-yun.js","hash":"3f9ae0efada21a0ce60e5d82b492bb5ef11efd22","modified":1656557929628},{"_id":"node_modules/hexo-theme-yun/source/js/gallery-decrypt.js","hash":"6ee4592b844600697f7731b3506fdda97cd66fb3","modified":1656557929621},{"_id":"node_modules/hexo-theme-yun/source/js/pjax.js","hash":"dade4a5bce091b4806f9e4fbbb465b0f687566d7","modified":1656557929673},{"_id":"node_modules/hexo-theme-yun/source/js/say.js","hash":"a72fdc92df65d8afa9e712b2a2390b98ffab624a","modified":1656557929687},{"_id":"node_modules/hexo-theme-yun/scripts/events/config.js","hash":"3163021ffbf200299c6744470be6c8f7b58c58f5","modified":1656557929500},{"_id":"node_modules/hexo-theme-yun/source/js/utils.js","hash":"a0a8b82c86e7457a439faba73a4959095260cc2c","modified":1656557929701},{"_id":"node_modules/hexo-theme-yun/scripts/events/index.js","hash":"2aa296b4b382c2ba82651c0da5cfc7397602a65f","modified":1656557929635},{"_id":"node_modules/hexo-theme-yun/source/js/sidebar.js","hash":"bd826cfc0def542fe5726c4976090778b9afa2d5","modified":1656557929692},{"_id":"node_modules/hexo-theme-yun/scripts/events/data.js","hash":"1001c5ed41fc2fe40336be559c3e567733ad781b","modified":1656557929514},{"_id":"node_modules/hexo-theme-yun/scripts/events/utils.js","hash":"700ad26e83b53358f6c01c42708be02f735f647c","modified":1656557929697},{"_id":"node_modules/hexo-theme-yun/scripts/filters/index.js","hash":"d8fec37863999499ade184cd471a48325864eba0","modified":1656557929646},{"_id":"node_modules/hexo-theme-yun/scripts/tags/prompt.js","hash":"2ba1a0e819f7d5ac9efa3b4032930392fc06e5a3","modified":1656557929681},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/encrypt.js","hash":"2dea8e32ccddbb3cdade7f5d1012b2aeb6d283d2","modified":1656557929553},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/engine.js","hash":"d64dee6563404df3fd2bff5357b06fecde1051df","modified":1656557929561},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/yun-config.js","hash":"41241c920bf0892cd285fe37a65a87ae70f901c7","modified":1656557929711},{"_id":"node_modules/hexo-theme-yun/layout/_partial/sidebar/info.pug","hash":"6886c2be8a2272c946516411abdb7560601e5926","modified":1656557929844},{"_id":"node_modules/hexo-theme-yun/scripts/helpers/index.js","hash":"91d0bf1064a6fa8f4423185018908a1b16e9ba6a","modified":1656557929652},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-content.pug","hash":"eb5a9b48e1a2172af74ac1b4c3851d7c6a9fc6f8","modified":1656557929878},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-edit.pug","hash":"84323ed7abb8d3f0009528c5ef299258bf892bb7","modified":1656557929881},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-copyright.pug","hash":"bceb7bbf27e0544f2a6ad723518d15df95f485ac","modified":1656557929880},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1656557929887},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/post-nav.pug","hash":"a639a10e40124439cb6ccb4756672b830d657277","modified":1656557929885},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/algolia-search.pug","hash":"df52fcef82e01d1b1d96dad2df516acffc298435","modified":1656557929738},{"_id":"node_modules/hexo-theme-yun/layout/_partial/post/reward.pug","hash":"1686a4ae9538b6dd1d43d12422441ca995eda905","modified":1656557929894},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/index.pug","hash":"9903cc7e20213ed087a4357a73f28b9694442100","modified":1656557929839},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/busuanzi.pug","hash":"a2503ff7bbaf05e9205fd36177f803cf91021e05","modified":1656557929768},{"_id":"node_modules/hexo-theme-yun/layout/_widget/search/local-search.pug","hash":"21f2e85869c793b7d58d58961eb7073c4126cf71","modified":1656557929856},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/google-analytics.pug","hash":"3cb12c4ec3f5dbaeccf1a63a6aaa9e31dcaf926e","modified":1656557929805},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/analytics/leancloud-visitors.pug","hash":"e7debe84507235c2a92a78e2367727a061e94ba1","modified":1656557929849},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/index.pug","hash":"9a61d4923fad7c778f0bf2ce8c81744b126e6a1f","modified":1656557929833},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/math/katex.pug","hash":"e1e7cb8213c9616f2b50482b69386120dc02206b","modified":1656557929845},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1656557929803},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqus.pug","hash":"71e78e45545ac6872ca921fe84af15b8e797e8e6","modified":1656557929779},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/disqusjs.pug","hash":"dea47f1db45f60f9c03498f628591f0197e3df0c","modified":1656557929782},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-discussions.pug","hash":"84ba9bc5f4c1daf9636648c181c9a781706fb18d","modified":1656557929797},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/giscus.pug","hash":"f4c1eeb652839300b7358a117cb89cee72fa257b","modified":1656557929795},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/index.pug","hash":"ec6e1d4498cdec56b384216d3efccfdcc617e57b","modified":1656557929828},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/github-issues.pug","hash":"a2209c9d873b88a830c518d80a754fe2068e0b55","modified":1656557929800},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/livere.pug","hash":"b81ed4fb8a0ca32ccfb8e22c37ac48e4be1f4152","modified":1656557929854},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/minivaline.pug","hash":"639030d030f51cbcae8175d589108836ad52f95b","modified":1656557929861},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/utterances.pug","hash":"712f893469f258e969806e1b55d0d2ac926761be","modified":1656557929909},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/twikoo.pug","hash":"f9b0e4704b8ce83212529caffb50b6e27a2a761f","modified":1656557929907},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/valine.pug","hash":"8ecd5f64f54780c01fc1f2b67da5da67b401c142","modified":1656557929911},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/comments/waline.pug","hash":"19058980ff135ebab8a1195dd56e63a60b066d12","modified":1656557929915},{"_id":"node_modules/hexo-theme-yun/source/css/_components/card.styl","hash":"1e5f8da293d53c6f352aa17fc625f88bd0840fa6","modified":1656557929942},{"_id":"node_modules/hexo-theme-yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1656557929940},{"_id":"node_modules/hexo-theme-yun/source/css/_components/scrollbar.styl","hash":"2d735d019b58a1e6fea297e0027c33a4a7bc1858","modified":1656557929994},{"_id":"node_modules/hexo-theme-yun/source/css/_components/ui.styl","hash":"8ef28ee3363f3676c9327a6d163032a003520f40","modified":1656557930004},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/index.pug","hash":"52b8567a5527fe85b41ac2a0a6adb113ba6b7205","modified":1656557929836},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/mermaid/mermaid.pug","hash":"61d15ed524f67704d00282216bd0109bb2b279da","modified":1656557929860},{"_id":"node_modules/hexo-theme-yun/layout/_third-party/seo/baidu-push.pug","hash":"0669b8c7e54c0a80e1f36e720e299cf0cd1182fe","modified":1656557929762},{"_id":"node_modules/hexo-theme-yun/source/css/_global/index.styl","hash":"6ee9d2bd59706e79e8932bcfc09d86c124467452","modified":1656557929956},{"_id":"node_modules/hexo-theme-yun/source/css/_helper/index.styl","hash":"a137adf7cb787fbacb9e37101d546eccf365aadc","modified":1656557929959},{"_id":"node_modules/hexo-theme-yun/source/css/_global/dark.styl","hash":"1bb7e112f388f681199a37fabfdc1ec1544b9afd","modified":1656557929946},{"_id":"node_modules/hexo-theme-yun/source/css/_global/reset.styl","hash":"d1640eb4f76a3cf792c5149e93c42c85da5a29b2","modified":1656557929991},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/footer.styl","hash":"ed3afcddad7358ebd89f01846157e26a586e7adf","modified":1656557929947},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/banner.styl","hash":"94e2005f3a3f51985679768c6e2acf888a5c934f","modified":1656557929935},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/links.styl","hash":"3174cf42a1f79f814ea0a14798f6c5fe28b5dda9","modified":1656557929964},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/main.styl","hash":"2c39ba5d789224bdece3f7c16bc7a82b3e899bf4","modified":1656557929969},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/pagination.styl","hash":"a4da4433f5c11b4de36782b7dac059bf67dde938","modified":1656557929973},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/page.styl","hash":"6ec814a0fccf73a22ba6b94f6d4bba889cbaf0b5","modified":1656557929971},{"_id":"node_modules/hexo-theme-yun/source/css/_layout/post.styl","hash":"2d495981c7456095ae62f97e9c032e1f3fb03cda","modified":1656557929988},{"_id":"node_modules/hexo-theme-yun/source/css/_mixins/base.styl","hash":"2531c22a33aa929dd6bf6c1b9975efc0a70e4a8d","modified":1656557929938},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_code.styl","hash":"2674ad7562f5b6f42d26291e8f5ead7f501a3c46","modified":1656557929919},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_base.styl","hash":"0288e3196318b116f991b043486fbc0b4b0bc579","modified":1656557929917},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/_colors.styl","hash":"5842436c6b74763866a1bc38d1c7cfed715e9e22","modified":1656557929921},{"_id":"node_modules/hexo-theme-yun/source/css/_variables/var.styl","hash":"53534672909e34f190c18c9e79cf089bcb46a6c7","modified":1656557930005},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/index.styl","hash":"a740126826a0ae9a1a2860fbb9c8d805d006aad6","modified":1656557929960},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/back-to-top.styl","hash":"5898b0c6c36fd1d2ff5408ca098e345ebf04008c","modified":1656557929932},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/comment.styl","hash":"c4f72796a25352dc92b11579b75bbf2a0b969744","modified":1656557929944},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/notice.styl","hash":"1d68860529a4fd8d3f63d2f257ed32b4e0f1167f","modified":1656557929970},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/say.styl","hash":"c47dd38477c08d31e0813610263200322e8f5ebe","modified":1656557929992},{"_id":"node_modules/hexo-theme-yun/source/js/comments/disqus.js","hash":"f53352ecb1a7a1b0c738ab16a095658810e563e5","modified":1656557929535},{"_id":"node_modules/hexo-theme-yun/source/js/analytics/leancloud-visitors.js","hash":"89952ef9eb5fe84c856068a6e6c274e396f74dd5","modified":1656557929662},{"_id":"node_modules/hexo-theme-yun/source/js/comments/waline.js","hash":"8c3859f6493fb43afac67cba32f9f1d952860dde","modified":1656557929706},{"_id":"node_modules/hexo-theme-yun/source/js/search/algolia-search.js","hash":"871c2e2b9bdbd36329e928e9213a425d4ff420d6","modified":1656557929323},{"_id":"node_modules/hexo-theme-yun/source/js/search/local-search.js","hash":"b3d73b7357a791fff676d918178a4554ad7d4912","modified":1656557929668},{"_id":"node_modules/hexo-theme-yun/source/js/ui/banner.js","hash":"eb9219312b141bbc345fb7fac7a84996a5ff49e3","modified":1656557929404},{"_id":"node_modules/hexo-theme-yun/source/js/ui/fireworks.js","hash":"2be3e953af5505f993ef2782cfc7bdce74cf5a85","modified":1656557929608},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-card.styl","hash":"048208163b5554110708b9c791fd64468b76f8ca","modified":1656557929975},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-header.styl","hash":"2e674b76b47b3e6226269fe357d8b937b7a007a8","modified":1656557929980},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-codebloack.styl","hash":"c3cf80ace92d9ba5711cdf487f818cd31598866c","modified":1656557929976},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1656557929979},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-markdown.styl","hash":"d7a5002f2f00287f55c0d9f2f8081cc8bd742786","modified":1656557929983},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-nav.styl","hash":"a9e5f18cee94944c43b0c09d6ec840b78c1f1aa0","modified":1656557929985},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/hamburger.styl","hash":"0fa240e8a71fdad14d3fd6b3fd49cf697d4c8153","modified":1656557929951},{"_id":"node_modules/hexo-theme-yun/source/css/_components/post/post-reward.styl","hash":"f69f5770e0908a8e8a0931f67e2417b0e1692613","modified":1656557929987},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"d8feec6f13ca9bd714e4fe7189abf1907848efef","modified":1656557929995},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar.styl","hash":"c1266c1039f6ac26884f4619265b29bdb1a9e31c","modified":1656557930001},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"b4b42a6dc949b52b5a861239905d333e1db6c64f","modified":1656557929997},{"_id":"node_modules/hexo-theme-yun/source/css/_components/sidebar/site-overview.styl","hash":"fbdc24be19edeb15f66350aa4f6cc5d800c55ff0","modified":1656557930002},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/index.styl","hash":"1c4ae0e519bb8629425235f2efd80addfc2bee93","modified":1656557929955},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/tags/prompt.styl","hash":"553d59840e1c9217b49b902cfe1ac520bbf71e5c","modified":1656557929989},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/girls.styl","hash":"e83c8b1219d0117bc342c40030e106b21245dddf","modified":1656557929949},{"_id":"node_modules/hexo-theme-yun/source/css/_extend/albums.styl","hash":"1e7c7730c89b6d81da37f6565239679b5075234b","modified":1656557929925},{"_id":"node_modules/hexo-theme-yun/LICENSE","hash":"29328e43254bc306816efe3b09018581e18db788","modified":1656557930018},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/algolia-search.styl","hash":"69916b23d54859160c4fda5ee809b8375fc56151","modified":1656557929928},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/index.styl","hash":"c396e3205eb672c96fdb93c12ff66e730ab323ee","modified":1656557929962},{"_id":"node_modules/hexo-theme-yun/source/css/_widget/search/local-search.styl","hash":"06eca018b7d1b9bed271956c0eba1537b6e3de87","modified":1656557929967},{"_id":"source/images/avatar.png","hash":"8e5987c3603dd5f5d4233a5563de4e70c137c399","modified":1656489885369},{"_id":"source/_posts/test/test.md","hash":"c536fde03ce5f4e65ebac740f0852c255b0b7058","modified":1656916117154},{"_id":"source/_posts/test/1656917302384.png","hash":"1fa7104b20ddf770ac926fddf1fdbd5c4f51341c","modified":1656917302367},{"_id":"source/_posts/test/1656918235425.png","hash":"0f6b2e06dd3aca33b40b344c111812e05569d768","modified":1656918235407}],"Category":[{"name":"Atcoder","_id":"cl56cucfj0006xgtu4izs2xnx"},{"name":"杂题","_id":"cl56cucfl0009xgtu901bgxnn"}],"Data":[],"Page":[{"layout":"404","title":"四大皆空","reward":false,"_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: 四大皆空\npermalink: /404.html\nreward: false\n---","date":"2022-07-01T04:35:44.849Z","updated":"2022-07-01T04:35:44.849Z","path":"/404.html","comments":1,"_id":"cl56cucfb0000xgtuefeaez9m","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2022-07-01T05:07:26.000Z","type":"about","aplayer":true,"icon":"ri:cloud-line","iconify":true,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2022-07-01 13:07:26\ntype: \"about\"\naplayer: true\nicon: ri:cloud-line\niconify: true\n---\n","updated":"2022-07-01T05:14:00.648Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl56cucfg0002xgtu1ig0c87a","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2022-06-30T05:05:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ndate: 2022-06-30 13:05:25\ntype: categories\ncomments: false\n---\n","updated":"2022-06-30T05:14:46.745Z","path":"categories/index.html","title":"","layout":"page","_id":"cl56cucfi0004xgtufblq6goy","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2022-06-30T05:05:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ndate: 2022-06-30 13:05:03\ntype: tags\ncomments: false\n---\n","updated":"2022-06-30T05:14:45.782Z","path":"tags/index.html","title":"","layout":"page","_id":"cl56cucfl0008xgtua3djhqg2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AtCoder Beginner Contest 258 E(循环节) G","abbrlink":"dd2281be","date":"2022-07-03T06:44:10.000Z","updated":"2022-07-03T06:44:10.000Z","_content":"\n<!-- more -->\n\n---\n\n# E Packing Potatoes  (循环节)\n## 题意\n有无限个土豆，每个土豆重量由序列W决定，第$i$个土豆重量为$W_{i-1}\\mod N$。将这些土豆转入盒子中，当盒子中土豆重量超过$X$则将土豆密封，换新的盒子\n\n问第$K$个盒子中有几个土豆。\n\n## 分析\n\n由于$K$的数据范围很大，可以发现又是个找循环节的题(~~ABC貌似挺喜欢出这种题的?~~)\n\n可以发现，每装完一个盒子后，又会从新的盒子开始装，设第$j$个盒子从第$i$个土豆开始装，装了$P[i]$个土豆，那么第$j+1$个盒子将会从第$i+P[i]$个土豆开始装。\n例如样例\n\n> 3 2 5\n> 3 4 1\n\n第$1$个盒子从第$0$个土豆开始装，装了$2$个，则第$2$个盒子便从第$0+2=2$个土豆开始装。\n\n因为$N\\le 2\\times 10^5$ ,考虑最坏情况，前$N$个盒子都从第不同个土豆开始装，第$N+1$个盒子必然会以前面出现过的土豆开始装，所以循环节长度有限，我们可以找到循环节。\n\n我们可以通过二分或双指针找到以每一个土豆开始装满一盒，能装多少个。\n\n``` cpp\nfor(int i=0;i<n;++i){\n    ll X = x;\n    p[i]=X/pre[n]*n;\n    X%=pre[n];\n    int l = 0,r = n;\n    while(l<r){\n        int mid = l+r>>1;\n        int j = i+mid-1;\n        ll t;\n        if(j<n)t = get_sum(i,j);\n        else t = get_sum(i,n-1)+get_sum(0,j%n);\n        if(t>=X)r = mid;\n        else l = mid+1;\n    }\n    p[i]+=l;\n}\n```\n\n然后就是找循环节了，虽然写过很多次类似的题，但找循环节这块还是写的特别丑\n\n``` cpp\nvector<ll>ans;\nvector<ll>vis(n,-1);\nll i = 0,l=-1;\nwhile(1){\n    ans.push_back(p[i]);\n    if(vis[i]==-1)vis[i]=ans.size()-1;\n    ll j = (i+p[i])%n;\n    if(~vis[j]){\n        l=vis[j];\n        break;\n    }\n    i = j;\n}\n```\n\n## 完整代码\n\n``` cpp\n#include<bits/stdc++.h>\n#define all(x) begin(x), end(x)\nusing namespace std;\nusing ll = long long;\nusing PII = pair<int,int>;\nconstexpr int mod = 998244353;\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr int N = 1e5+5;\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    int n,q,x;\n    cin>>n>>q>>x;\n    vector<ll>w(n),pre(n+1),p(n);\n    for(auto&x:w)cin>>x;\n    for(int i=0;i<n;++i)pre[i+1]=pre[i]+w[i];\n    auto get_sum = [&](int l,int r)->ll{\n        if(l>r+1)return 0ll;\n        return pre[r+1]-pre[l];\n    };\n    for(int i=0;i<n;++i){\n        ll X = x;\n        p[i]=X/pre[n]*n;\n        X%=pre[n];\n        int l = 0,r = n;\n        while(l<r){\n            int mid = l+r>>1;\n            int j = i+mid-1;\n            ll t;\n            if(j<n)t = get_sum(i,j);\n            else t = get_sum(i,n-1)+get_sum(0,j%n);\n            if(t>=X)r = mid;\n            else l = mid+1;\n        }\n        p[i]+=l;\n    }\n    // for(int i=0;i<n;++i){\n    //     cout<<i<<' '<<p[i]<<'\\n';\n    // }\n    vector<ll>ans;\n    vector<ll>vis(n,-1);\n    ll i = 0,l=-1;\n    while(1){\n        ans.push_back(p[i]);\n        if(vis[i]==-1)vis[i]=ans.size()-1;\n        ll j = (i+p[i])%n;\n        if(~vis[j]){\n            l=vis[j];\n            break;\n        }\n        i = j;\n    }\n    int m = ans.size()-l;\n    while(q--){\n        ll k;\n        cin>>k;\n        --k;\n        if(k<l)cout<<ans[k]<<'\\n';\n        else {\n            k = (k-l)%m+l;\n            cout<<ans[k]<<'\\n';\n        }\n    }\n    return 0;\n}\n```\n\n# G Triangle (bitset)\n\n## 题意\n\n给一个$N \\times N$的邻接矩阵，$3\\le N \\le 3000$,问有多少对$(i,j,k)$满足两两存在边\n\n## 思路\n\n这题解法让我大受震撼。\n\n考虑暴力枚举三个点，时间复杂度$O(n^3)$,大概$9 \\times 10^9$的规模，显然过不了。\n\n使用`bitset`优化，时间复杂度为$O(\\frac{n^3}{w}),w = 64$,规模一下变成了 $10^8$。\n\n时限$3s$跑了$1068ms$ \n\n ![image-20220703162432579](image-20220703162432579.png)\n## 代码\n\n``` cpp\n#include<bits/stdc++.h>\n#define all(x) begin(x), end(x)\nusing namespace std;\nusing ll = long long;\nusing PII = pair<int,int>;\nconstexpr int mod = 998244353;\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr int N = 3333;\nint n;\nbitset<N>a[N];\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    cin>>n;\n    for(int i=1;i<=n;++i){\n        string s;\n        cin>>s;\n        for(int j=i;j<n;++j){\n            if(s[j]=='1')a[i].set(j+1);\n        }\n    }\n    ll ans = 0;\n    for(int i=1;i<=n;++i){\n        for(int j=i+1;j<=n;++j){\n            if(a[i][j])ans+=(a[i]&a[j]).count();\n        }\n    }\n    cout<<ans<<'\\n';\n    return 0;\n}\n```\n\n<!-- Q.E.D. -->\n\n","source":"_posts/acm/ABC258.md","raw":"---\ntitle: AtCoder Beginner Contest 258 E(循环节) G\ntags: 题解\ncategories: Atcoder\nabbrlink: dd2281be\ndate: 2022-07-03 14:44:10\nupdated: 2022-07-03 14:44:10\n---\n\n<!-- more -->\n\n---\n\n# E Packing Potatoes  (循环节)\n## 题意\n有无限个土豆，每个土豆重量由序列W决定，第$i$个土豆重量为$W_{i-1}\\mod N$。将这些土豆转入盒子中，当盒子中土豆重量超过$X$则将土豆密封，换新的盒子\n\n问第$K$个盒子中有几个土豆。\n\n## 分析\n\n由于$K$的数据范围很大，可以发现又是个找循环节的题(~~ABC貌似挺喜欢出这种题的?~~)\n\n可以发现，每装完一个盒子后，又会从新的盒子开始装，设第$j$个盒子从第$i$个土豆开始装，装了$P[i]$个土豆，那么第$j+1$个盒子将会从第$i+P[i]$个土豆开始装。\n例如样例\n\n> 3 2 5\n> 3 4 1\n\n第$1$个盒子从第$0$个土豆开始装，装了$2$个，则第$2$个盒子便从第$0+2=2$个土豆开始装。\n\n因为$N\\le 2\\times 10^5$ ,考虑最坏情况，前$N$个盒子都从第不同个土豆开始装，第$N+1$个盒子必然会以前面出现过的土豆开始装，所以循环节长度有限，我们可以找到循环节。\n\n我们可以通过二分或双指针找到以每一个土豆开始装满一盒，能装多少个。\n\n``` cpp\nfor(int i=0;i<n;++i){\n    ll X = x;\n    p[i]=X/pre[n]*n;\n    X%=pre[n];\n    int l = 0,r = n;\n    while(l<r){\n        int mid = l+r>>1;\n        int j = i+mid-1;\n        ll t;\n        if(j<n)t = get_sum(i,j);\n        else t = get_sum(i,n-1)+get_sum(0,j%n);\n        if(t>=X)r = mid;\n        else l = mid+1;\n    }\n    p[i]+=l;\n}\n```\n\n然后就是找循环节了，虽然写过很多次类似的题，但找循环节这块还是写的特别丑\n\n``` cpp\nvector<ll>ans;\nvector<ll>vis(n,-1);\nll i = 0,l=-1;\nwhile(1){\n    ans.push_back(p[i]);\n    if(vis[i]==-1)vis[i]=ans.size()-1;\n    ll j = (i+p[i])%n;\n    if(~vis[j]){\n        l=vis[j];\n        break;\n    }\n    i = j;\n}\n```\n\n## 完整代码\n\n``` cpp\n#include<bits/stdc++.h>\n#define all(x) begin(x), end(x)\nusing namespace std;\nusing ll = long long;\nusing PII = pair<int,int>;\nconstexpr int mod = 998244353;\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr int N = 1e5+5;\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    int n,q,x;\n    cin>>n>>q>>x;\n    vector<ll>w(n),pre(n+1),p(n);\n    for(auto&x:w)cin>>x;\n    for(int i=0;i<n;++i)pre[i+1]=pre[i]+w[i];\n    auto get_sum = [&](int l,int r)->ll{\n        if(l>r+1)return 0ll;\n        return pre[r+1]-pre[l];\n    };\n    for(int i=0;i<n;++i){\n        ll X = x;\n        p[i]=X/pre[n]*n;\n        X%=pre[n];\n        int l = 0,r = n;\n        while(l<r){\n            int mid = l+r>>1;\n            int j = i+mid-1;\n            ll t;\n            if(j<n)t = get_sum(i,j);\n            else t = get_sum(i,n-1)+get_sum(0,j%n);\n            if(t>=X)r = mid;\n            else l = mid+1;\n        }\n        p[i]+=l;\n    }\n    // for(int i=0;i<n;++i){\n    //     cout<<i<<' '<<p[i]<<'\\n';\n    // }\n    vector<ll>ans;\n    vector<ll>vis(n,-1);\n    ll i = 0,l=-1;\n    while(1){\n        ans.push_back(p[i]);\n        if(vis[i]==-1)vis[i]=ans.size()-1;\n        ll j = (i+p[i])%n;\n        if(~vis[j]){\n            l=vis[j];\n            break;\n        }\n        i = j;\n    }\n    int m = ans.size()-l;\n    while(q--){\n        ll k;\n        cin>>k;\n        --k;\n        if(k<l)cout<<ans[k]<<'\\n';\n        else {\n            k = (k-l)%m+l;\n            cout<<ans[k]<<'\\n';\n        }\n    }\n    return 0;\n}\n```\n\n# G Triangle (bitset)\n\n## 题意\n\n给一个$N \\times N$的邻接矩阵，$3\\le N \\le 3000$,问有多少对$(i,j,k)$满足两两存在边\n\n## 思路\n\n这题解法让我大受震撼。\n\n考虑暴力枚举三个点，时间复杂度$O(n^3)$,大概$9 \\times 10^9$的规模，显然过不了。\n\n使用`bitset`优化，时间复杂度为$O(\\frac{n^3}{w}),w = 64$,规模一下变成了 $10^8$。\n\n时限$3s$跑了$1068ms$ \n\n ![image-20220703162432579](image-20220703162432579.png)\n## 代码\n\n``` cpp\n#include<bits/stdc++.h>\n#define all(x) begin(x), end(x)\nusing namespace std;\nusing ll = long long;\nusing PII = pair<int,int>;\nconstexpr int mod = 998244353;\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr int N = 3333;\nint n;\nbitset<N>a[N];\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    cin>>n;\n    for(int i=1;i<=n;++i){\n        string s;\n        cin>>s;\n        for(int j=i;j<n;++j){\n            if(s[j]=='1')a[i].set(j+1);\n        }\n    }\n    ll ans = 0;\n    for(int i=1;i<=n;++i){\n        for(int j=i+1;j<=n;++j){\n            if(a[i][j])ans+=(a[i]&a[j]).count();\n        }\n    }\n    cout<<ans<<'\\n';\n    return 0;\n}\n```\n\n<!-- Q.E.D. -->\n\n","slug":"acm/ABC258","published":1,"_id":"cl56cucfg0003xgtuddi4ac6l","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"E-Packing-Potatoes-循环节\"><a href=\"#E-Packing-Potatoes-循环节\" class=\"headerlink\" title=\"E Packing Potatoes  (循环节)\"></a>E Packing Potatoes  (循环节)</h1><h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有无限个土豆，每个土豆重量由序列W决定，第$i$个土豆重量为$W_{i-1}\\mod N$。将这些土豆转入盒子中，当盒子中土豆重量超过$X$则将土豆密封，换新的盒子</p>\n<p>问第$K$个盒子中有几个土豆。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>由于$K$的数据范围很大，可以发现又是个找循环节的题(<del>ABC貌似挺喜欢出这种题的?</del>)</p>\n<p>可以发现，每装完一个盒子后，又会从新的盒子开始装，设第$j$个盒子从第$i$个土豆开始装，装了$P[i]$个土豆，那么第$j+1$个盒子将会从第$i+P[i]$个土豆开始装。<br>例如样例</p>\n<blockquote>\n<p>3 2 5<br>3 4 1</p>\n</blockquote>\n<p>第$1$个盒子从第$0$个土豆开始装，装了$2$个，则第$2$个盒子便从第$0+2&#x3D;2$个土豆开始装。</p>\n<p>因为$N\\le 2\\times 10^5$ ,考虑最坏情况，前$N$个盒子都从第不同个土豆开始装，第$N+1$个盒子必然会以前面出现过的土豆开始装，所以循环节长度有限，我们可以找到循环节。</p>\n<p>我们可以通过二分或双指针找到以每一个土豆开始装满一盒，能装多少个。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ll X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>X<span class=\"token operator\">/</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n    X<span class=\"token operator\">%=</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>r<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ll t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span>t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">>=</span>X<span class=\"token punctuation\">)</span>r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后就是找循环节了，虽然写过很多次类似的题，但找循环节这块还是写的特别丑</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>ans<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nll i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    ll j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        l<span class=\"token operator\">=</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">all</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>q<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span>x<span class=\"token operator\">:</span>w<span class=\"token punctuation\">)</span>cin<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> get_sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ll<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">></span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0ll</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>pre<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ll X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>X<span class=\"token operator\">/</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        X<span class=\"token operator\">%=</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>r<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            ll t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span>t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">>=</span>X<span class=\"token punctuation\">)</span>r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>l<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// for(int i=0;i&lt;n;++i)&#123;</span>\n    <span class=\"token comment\">//     cout&lt;&lt;i&lt;&lt;' '&lt;&lt;p[i]&lt;&lt;'\\n';</span>\n    <span class=\"token comment\">// &#125;</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>ans<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ll j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            l<span class=\"token operator\">=</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ll k<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">--</span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            k <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>m<span class=\"token operator\">+</span>l<span class=\"token punctuation\">;</span>\n            cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"G-Triangle-bitset\"><a href=\"#G-Triangle-bitset\" class=\"headerlink\" title=\"G Triangle (bitset)\"></a>G Triangle (bitset)</h1><h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给一个$N \\times N$的邻接矩阵，$3\\le N \\le 3000$,问有多少对$(i,j,k)$满足两两存在边</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>这题解法让我大受震撼。</p>\n<p>考虑暴力枚举三个点，时间复杂度$O(n^3)$,大概$9 \\times 10^9$的规模，显然过不了。</p>\n<p>使用<code>bitset</code>优化，时间复杂度为$O(\\frac{n^3}{w}),w &#x3D; 64$,规模一下变成了 $10^8$。</p>\n<p>时限$3s$跑了$1068ms$ </p>\n<p> <img src=\"/dd2281be/image-20220703162432579.png\" alt=\"image-20220703162432579\" loading=\"lazy\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">all</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">3333</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\nbitset<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        string s<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ll ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>ans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<!-- Q.E.D. -->\n\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"E-Packing-Potatoes-循环节\"><a href=\"#E-Packing-Potatoes-循环节\" class=\"headerlink\" title=\"E Packing Potatoes  (循环节)\"></a>E Packing Potatoes  (循环节)</h1><h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有无限个土豆，每个土豆重量由序列W决定，第$i$个土豆重量为$W_{i-1}\\mod N$。将这些土豆转入盒子中，当盒子中土豆重量超过$X$则将土豆密封，换新的盒子</p>\n<p>问第$K$个盒子中有几个土豆。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>由于$K$的数据范围很大，可以发现又是个找循环节的题(<del>ABC貌似挺喜欢出这种题的?</del>)</p>\n<p>可以发现，每装完一个盒子后，又会从新的盒子开始装，设第$j$个盒子从第$i$个土豆开始装，装了$P[i]$个土豆，那么第$j+1$个盒子将会从第$i+P[i]$个土豆开始装。<br>例如样例</p>\n<blockquote>\n<p>3 2 5<br>3 4 1</p>\n</blockquote>\n<p>第$1$个盒子从第$0$个土豆开始装，装了$2$个，则第$2$个盒子便从第$0+2&#x3D;2$个土豆开始装。</p>\n<p>因为$N\\le 2\\times 10^5$ ,考虑最坏情况，前$N$个盒子都从第不同个土豆开始装，第$N+1$个盒子必然会以前面出现过的土豆开始装，所以循环节长度有限，我们可以找到循环节。</p>\n<p>我们可以通过二分或双指针找到以每一个土豆开始装满一盒，能装多少个。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ll X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>X<span class=\"token operator\">/</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n    X<span class=\"token operator\">%=</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>r<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ll t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span>t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">>=</span>X<span class=\"token punctuation\">)</span>r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后就是找循环节了，虽然写过很多次类似的题，但找循环节这块还是写的特别丑</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>ans<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nll i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    ll j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        l<span class=\"token operator\">=</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">all</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>q<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span>x<span class=\"token operator\">:</span>w<span class=\"token punctuation\">)</span>cin<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> get_sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ll<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">></span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0ll</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>pre<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ll X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>X<span class=\"token operator\">/</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        X<span class=\"token operator\">%=</span>pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>r<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            ll t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span>t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> t <span class=\"token operator\">=</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">>=</span>X<span class=\"token punctuation\">)</span>r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>l<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// for(int i=0;i&lt;n;++i)&#123;</span>\n    <span class=\"token comment\">//     cout&lt;&lt;i&lt;&lt;' '&lt;&lt;p[i]&lt;&lt;'\\n';</span>\n    <span class=\"token comment\">// &#125;</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>ans<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ll j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            l<span class=\"token operator\">=</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ll k<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">--</span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            k <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>m<span class=\"token operator\">+</span>l<span class=\"token punctuation\">;</span>\n            cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"G-Triangle-bitset\"><a href=\"#G-Triangle-bitset\" class=\"headerlink\" title=\"G Triangle (bitset)\"></a>G Triangle (bitset)</h1><h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给一个$N \\times N$的邻接矩阵，$3\\le N \\le 3000$,问有多少对$(i,j,k)$满足两两存在边</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>这题解法让我大受震撼。</p>\n<p>考虑暴力枚举三个点，时间复杂度$O(n^3)$,大概$9 \\times 10^9$的规模，显然过不了。</p>\n<p>使用<code>bitset</code>优化，时间复杂度为$O(\\frac{n^3}{w}),w &#x3D; 64$,规模一下变成了 $10^8$。</p>\n<p>时限$3s$跑了$1068ms$ </p>\n<p> <img src=\"/dd2281be/image-20220703162432579.png\" alt=\"image-20220703162432579\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">all</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">3333</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\nbitset<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        string s<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ll ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>ans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<!-- Q.E.D. -->"},{"title":"[USACO21DEC] Convoluted Intervals S","abbrlink":"c42198e8","date":"2022-07-03T07:33:02.000Z","updated":"2022-07-03T07:33:02.000Z","_content":"\n<!-- more -->\n\n---\n\n# [USACO21DEC]  Convoluted Intervals S\n\n昨天训练赛题，感觉挺有意思的\n\n## 题意\n\n有$n$个区间，对于某个值$k$,问满足 $a_i+a_j\\le k\\le b_i+b_j$ 的有序对$(i,j)$的个数。\n\n输出$0$到$2M$内的每个值$k$的答案\n\n### 数据范围\n\n$1\\le N \\le 2 \\times 10^5$\n\n$ 1\\le M \\le 5000$\n\n$0\\le a_i,b_i \\le M$\n\n## 思路\n\n开始因为二维偏序问题，仔细看了看范围发现并不难。\n\n可以发现，对于每一对$(i,j)$,它对$k$的贡献是连续一段的，恰好是$[a_i+a_j,b_i+b_j]$\n\n发现$M$不大，因此我们可以暴力枚举$a_i,b_i$,然后利用差分实现区间加\n\n### 代码\n\n``` cpp\n#include<bits/stdc++.h>\n#define all(x) begin(x), end(x)\nusing namespace std;\nusing ll = long long;\nusing PII = pair<int,int>;\nconstexpr int mod = 998244353;\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr int N = 1e5+5;\nll a[N],b[N];\nll pre[N];\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    int n,m;\n    cin>>n>>m;\n    for(int i=0,x,y;i<n;++i){\n        cin>>x>>y;\n        ++a[x],++b[y];\n    }\n    for(int i=0;i<=m;++i){\n        for(int j=0;j<=m;++j){\n            pre[i+j]+=a[i]*a[j];\n            pre[i+j+1]-=b[i]*b[j];\n        }\n    }\n    for(int i=1;i<=2*m;++i)pre[i]+=pre[i-1];\n    for(int i=0;i<=2*m;++i)cout<<pre[i]<<'\\n';\n    return 0;\n}\n```\n\n<!-- Q.E.D. -->\n","source":"_posts/acm/Convoluted_Intervals.md","raw":"---\ntitle: '[USACO21DEC] Convoluted Intervals S'\ntags:\n  - 差分\ncategories: 杂题\nabbrlink: c42198e8\ndate: 2022-07-03 15:33:02\nupdated: 2022-07-03 15:33:02\n---\n\n<!-- more -->\n\n---\n\n# [USACO21DEC]  Convoluted Intervals S\n\n昨天训练赛题，感觉挺有意思的\n\n## 题意\n\n有$n$个区间，对于某个值$k$,问满足 $a_i+a_j\\le k\\le b_i+b_j$ 的有序对$(i,j)$的个数。\n\n输出$0$到$2M$内的每个值$k$的答案\n\n### 数据范围\n\n$1\\le N \\le 2 \\times 10^5$\n\n$ 1\\le M \\le 5000$\n\n$0\\le a_i,b_i \\le M$\n\n## 思路\n\n开始因为二维偏序问题，仔细看了看范围发现并不难。\n\n可以发现，对于每一对$(i,j)$,它对$k$的贡献是连续一段的，恰好是$[a_i+a_j,b_i+b_j]$\n\n发现$M$不大，因此我们可以暴力枚举$a_i,b_i$,然后利用差分实现区间加\n\n### 代码\n\n``` cpp\n#include<bits/stdc++.h>\n#define all(x) begin(x), end(x)\nusing namespace std;\nusing ll = long long;\nusing PII = pair<int,int>;\nconstexpr int mod = 998244353;\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr int N = 1e5+5;\nll a[N],b[N];\nll pre[N];\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    int n,m;\n    cin>>n>>m;\n    for(int i=0,x,y;i<n;++i){\n        cin>>x>>y;\n        ++a[x],++b[y];\n    }\n    for(int i=0;i<=m;++i){\n        for(int j=0;j<=m;++j){\n            pre[i+j]+=a[i]*a[j];\n            pre[i+j+1]-=b[i]*b[j];\n        }\n    }\n    for(int i=1;i<=2*m;++i)pre[i]+=pre[i-1];\n    for(int i=0;i<=2*m;++i)cout<<pre[i]<<'\\n';\n    return 0;\n}\n```\n\n<!-- Q.E.D. -->\n","slug":"acm/Convoluted_Intervals","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl56cucfi0005xgtudrktfqbc","content":"<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"USACO21DEC-Convoluted-Intervals-S\"><a href=\"#USACO21DEC-Convoluted-Intervals-S\" class=\"headerlink\" title=\"[USACO21DEC]  Convoluted Intervals S\"></a>[USACO21DEC]  Convoluted Intervals S</h1><p>昨天训练赛题，感觉挺有意思的</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有$n$个区间，对于某个值$k$,问满足 $a_i+a_j\\le k\\le b_i+b_j$ 的有序对$(i,j)$的个数。</p>\n<p>输出$0$到$2M$内的每个值$k$的答案</p>\n<h3 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><p>$1\\le N \\le 2 \\times 10^5$</p>\n<p>$ 1\\le M \\le 5000$</p>\n<p>$0\\le a_i,b_i \\le M$</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>开始因为二维偏序问题，仔细看了看范围发现并不难。</p>\n<p>可以发现，对于每一对$(i,j)$,它对$k$的贡献是连续一段的，恰好是$[a_i+a_j,b_i+b_j]$</p>\n<p>发现$M$不大，因此我们可以暴力枚举$a_i,b_i$,然后利用差分实现区间加</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">all</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll pre<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>b<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<!-- Q.E.D. -->\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"USACO21DEC-Convoluted-Intervals-S\"><a href=\"#USACO21DEC-Convoluted-Intervals-S\" class=\"headerlink\" title=\"[USACO21DEC]  Convoluted Intervals S\"></a>[USACO21DEC]  Convoluted Intervals S</h1><p>昨天训练赛题，感觉挺有意思的</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>有$n$个区间，对于某个值$k$,问满足 $a_i+a_j\\le k\\le b_i+b_j$ 的有序对$(i,j)$的个数。</p>\n<p>输出$0$到$2M$内的每个值$k$的答案</p>\n<h3 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><p>$1\\le N \\le 2 \\times 10^5$</p>\n<p>$ 1\\le M \\le 5000$</p>\n<p>$0\\le a_i,b_i \\le M$</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>开始因为二维偏序问题，仔细看了看范围发现并不难。</p>\n<p>可以发现，对于每一对$(i,j)$,它对$k$的贡献是连续一段的，恰好是$[a_i+a_j,b_i+b_j]$</p>\n<p>发现$M$不大，因此我们可以暴力枚举$a_i,b_i$,然后利用差分实现区间加</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">all</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll pre<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>b<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>cout<span class=\"token operator\">&lt;&lt;</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<!-- Q.E.D. -->"}],"PostAsset":[{"_id":"source/_posts/acm/ABC258/image-20220703162432579.png","slug":"image-20220703162432579.png","post":"cl56cucfg0003xgtuddi4ac6l","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl56cucfg0003xgtuddi4ac6l","category_id":"cl56cucfj0006xgtu4izs2xnx","_id":"cl56cucfm000cxgtub4guba0j"},{"post_id":"cl56cucfi0005xgtudrktfqbc","category_id":"cl56cucfl0009xgtu901bgxnn","_id":"cl56cucfm000exgtuec0e9snh"}],"PostTag":[{"post_id":"cl56cucfg0003xgtuddi4ac6l","tag_id":"cl56cucfk0007xgtufsb3dt82","_id":"cl56cucfm000bxgtu5x8pabdq"},{"post_id":"cl56cucfi0005xgtudrktfqbc","tag_id":"cl56cucfm000axgtubl5r8kkx","_id":"cl56cucfm000dxgtuc87d5skx"}],"Tag":[{"name":"题解","_id":"cl56cucfk0007xgtufsb3dt82"},{"name":"差分","_id":"cl56cucfm000axgtubl5r8kkx"}]}}